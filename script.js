const boardSize = 26;
const board1 = document.getElementById("board1");
const board2 = document.getElementById("board2");
const log = document.getElementById("log");

let position = 0;
let onSecondBoard = false;
let diceSequence = [];
let moveLog = [];
let totalRewards = {}; // –ø—Ä–∏–º–µ—Ä: { "–º–æ–Ω–µ—Ç—ã": 300, "—ç–Ω–µ—Ä–≥–∏—è": 20 }

const rewardsBoard1 = {
  1:  "2 —Å–µ—Ä—ã—Ö –∫—É–±–∏–∫–∞",
  2:  "10 —ç–Ω–µ—Ä–≥–∏–∏",
  4:  "300 –ø—ã–ª–∏",
  5:  "20 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤",
  6:  "50 –º–æ–Ω–µ—Ç",
  7:  "–∑–æ–ª–æ—Ç–æ",       // –¥–æ–±–∞–≤–ª–µ–Ω–æ
  8:  "–∑–æ–ª–æ—Ç–æ–π –∫—É–±–∏–∫",
  9:  "–∫–ª—é—á",
  10: "50 –º–æ–Ω–µ—Ç",
  11: "–∑–æ–ª–æ—Ç–æ",        // –¥–æ–±–∞–≤–ª–µ–Ω–æ
  12: "20 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤",
  13: "20 –∂–µ—Ç–æ–Ω–æ–≤",
  14: "200 –æ–ø—ã—Ç–∞",
  15: "300 –ø—ã–ª–∏",
  16: "200 –º–æ–Ω–µ—Ç",
  17: "2 —Å–µ—Ä—ã—Ö –∫—É–±–∏–∫–∞",
  18: "200 –æ–ø—ã—Ç–∞",
  19: "20 –∂–µ—Ç–æ–Ω–æ–≤",
  20: "–∫–ª—é—á",
  21: "10 —ç–Ω–µ—Ä–≥–∏–∏",
  22: "100 –º–æ–Ω–µ—Ç",
  23: "2 —Å–µ—Ä—ã—Ö –∫—É–±–∏–∫–∞",
  24: "–∑–æ–ª–æ—Ç–æ",       // –¥–æ–±–∞–≤–ª–µ–Ω–æ
  25: "60 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤"
};

const rewardsBoard2 = {
  1:  "2 —Å–µ—Ä—ã—Ö –∫—É–±–∏–∫–∞",
  2:  "10 —ç–Ω–µ—Ä–≥–∏–∏",
  4:  "200 –æ–ø—ã—Ç–∞",
  5:  "300 –ø—ã–ª–∏",
  6:  "100 –º–æ–Ω–µ—Ç",
  7:  "2 —Å–µ—Ä—ã—Ö –∫—É–±–∏–∫–∞",
  8:  "–∑–æ–ª–æ—Ç–æ–π –∫—É–±–∏–∫",
  9:  "–∫–ª—é—á",
  10: "50 –º–æ–Ω–µ—Ç",
  11: "–∑–æ–ª–æ—Ç–æ",        // –¥–æ–±–∞–≤–ª–µ–Ω–æ
  12: "20 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤",
  13: "20 –∂–µ—Ç–æ–Ω–æ–≤",
  14: "200 –æ–ø—ã—Ç–∞",
  15: "300 –ø—ã–ª–∏",
  16: "200 –º–æ–Ω–µ—Ç",
  17: "2 —Å–µ—Ä—ã—Ö –∫—É–±–∏–∫–∞",
  18: "200 –æ–ø—ã—Ç–∞",
  19: "20 –∂–µ—Ç–æ–Ω–æ–≤",
  20: "–∫–ª—é—á",
  21: "10 —ç–Ω–µ—Ä–≥–∏–∏",
  22: "100 –º–æ–Ω–µ—Ç",
  23: "2 —Å–µ—Ä—ã—Ö –∫—É–±–∏–∫–∞",
  24: "–∑–æ–ª–æ—Ç–æ",      // –¥–æ–±–∞–≤–ª–µ–Ω–æ
  25: "60 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤"
};

function getRewardEmoji(rewardText) {
  const map = [
    { keyword: "—Å–µ—Ä—ã—Ö –∫—É–±–∏–∫–∞", emoji: "üé≤" },
    { keyword: "—ç–Ω–µ—Ä–≥–∏–∏", emoji: "‚ö°Ô∏è" },
    { keyword: "–ø—ã–ª–∏", emoji: "üß™" },
    { keyword: "–º–æ–Ω–µ—Ç", emoji: "ü™ô" },
    { keyword: "–∑–æ–ª–æ—Ç–æ–π –∫—É–±–∏–∫", emoji: "üü®" },
    { keyword: "–∫–ª—é—á", emoji: "üóùÔ∏è" },
    { keyword: "–∫—Ä–∏—Å—Ç–∞–ª–ª", emoji: "üíé" },
    { keyword: "–∂–µ—Ç–æ–Ω", emoji: "üéüÔ∏è" },
    { keyword: "–æ–ø—ã—Ç–∞", emoji: "üîµ" },
    { keyword: "–∑–æ–ª–æ—Ç–æ", emoji: "üí∞" },
  ];
  const entry = map.find(item => rewardText.includes(item.keyword));
  return entry ? entry.emoji : "‚ùì";
}

function getRewardLabel(rewardText) {
  const match = rewardText.match(/^(\d+)/);
  return match ? match[1] : ""; // –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–∏–ª–∏ –ø—É—Å—Ç–æ, –µ—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ)
}

function getRewardFullLabel(rewardText) {
  return `${rewardText} ${getRewardEmoji(rewardText)}`;
}

const cellColors = {
  board1: {
    blue:    [1,4,5,9,12,15,17,20,23,25],
    green:   [2,7,11,14,18,21,24],
    yellow:  [6,10,16,22],
    purple:  [8,13,19],
    gray:    [0]
  },
  board2: {
    blue:    [1,5,7,9,12,15,17,20,23,25],
    green:   [2,4,11,14,18,21,24],
    yellow:  [6,10,16,22],
    purple:  [8,13,19],
    gray:    [0]
  }
};

const colorMap = {
  blue: "#cce4ff",     // —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
  green: "#ccffcc",    // —Å–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π
  yellow: "#fff8b3",   // —Å–≤–µ—Ç–ª–æ-–∂—ë–ª—Ç—ã–π
  purple: "#e6ccff",   // —Å–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
  gray: "#e0e0e0"      // —Å–µ—Ä—ã–π
};

function createBoard(board) {
  board.innerHTML = "";
  const cellSize = 60;
  const positions = [];

  if (board.id === "board2") {
    // –ü–æ–ª–µ 2
    positions[0]  = { top: 7 * cellSize, left: 6 * cellSize };
    positions[1]  = { top: 7 * cellSize, left: 5 * cellSize };
    positions[2]  = { top: 7 * cellSize, left: 4 * cellSize };
    positions[3]  = { top: 7 * cellSize, left: 3 * cellSize };
    positions[4]  = { top: 6 * cellSize, left: 3 * cellSize };
    positions[5]  = { top: 5 * cellSize, left: 3 * cellSize };
    positions[6]  = { top: 5 * cellSize, left: 2 * cellSize };
    positions[7]  = { top: 5 * cellSize, left: 1 * cellSize };
    positions[8]  = { top: 5 * cellSize, left: 0 * cellSize };
    positions[9]  = { top: 4 * cellSize, left: 0 * cellSize };
    positions[10] = { top: 3 * cellSize, left: 0 * cellSize };
    positions[11] = { top: 2 * cellSize, left: 0 * cellSize };
    positions[12] = { top: 1 * cellSize, left: 0 * cellSize };
    positions[13] = { top: 0 * cellSize, left: 0 * cellSize };
    positions[14] = { top: 0 * cellSize, left: 1 * cellSize };
    positions[15] = { top: 0 * cellSize, left: 2 * cellSize };
    positions[16] = { top: 0 * cellSize, left: 3 * cellSize };
    positions[17] = { top: 0 * cellSize, left: 4 * cellSize };
    positions[18] = { top: 0 * cellSize, left: 5 * cellSize };
    positions[19] = { top: 0 * cellSize, left: 6 * cellSize };
    positions[20] = { top: 1 * cellSize, left: 6 * cellSize };
    positions[21] = { top: 2 * cellSize, left: 6 * cellSize };
    positions[22] = { top: 3 * cellSize, left: 6 * cellSize };
    positions[23] = { top: 4 * cellSize, left: 6 * cellSize };
    positions[24] = { top: 5 * cellSize, left: 6 * cellSize };
    positions[25] = { top: 6 * cellSize, left: 6 * cellSize };
  } else {
    // –ü–æ–ª–µ 1
    for (let i = 6; i >= 0; i--) positions.push({ top: 7 * cellSize, left: i * cellSize });
    for (let i = 6; i >= 1; i--) positions.push({ top: i * cellSize, left: 0 });
    for (let i = 0; i < 7; i++)  positions.push({ top: 0, left: i * cellSize });
    for (let i = 1; i <= 6; i++) positions.push({ top: i * cellSize, left: 6 * cellSize });
  }

  for (let i = 0; i < positions.length; i++) {
    const cell = document.createElement("div");
    cell.className = "cell";
    cell.style.position = "absolute";
    cell.style.top = positions[i].top + "px";
    cell.style.left = positions[i].left + "px";
    cell.dataset.index = i;

    // –¶–≤–µ—Ç
    const colorScheme = board.id === "board2" ? cellColors.board2 : cellColors.board1;
    for (const [colorName, indices] of Object.entries(colorScheme)) {
      if (indices.includes(i)) {
        cell.style.backgroundColor = colorMap[colorName];
        break;
      }
    }

    // –ö–æ–Ω—Ç–µ–Ω—Ç
    if (i === 0) {
      cell.textContent = "";
    } else if (i === 3) {
      cell.innerHTML = `<div style="font-size: 28px;">${board.id === "board2" ? "‚¨ÜÔ∏è" : "‚¨ÖÔ∏è"}</div>`;
    } else {
      const rewards = board.id === "board2" ? rewardsBoard2 : rewardsBoard1;
      const reward = rewards[i];
      if (reward) {
        const emoji = getRewardEmoji(reward);
        const label = getRewardLabel(reward);
        cell.innerHTML = `<div style="font-size: 28px;">${emoji}</div><div style="font-size: 12px;">${label}</div>`;
        cell.title = reward; // –≤—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
      } else {
        cell.textContent = "";
      }
    }
    // –ü–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ‚Äî –æ—Ç—Ä–∏—Å—É–µ–º —Ñ–∞–Ω—Ç–æ–º–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
    if (board.id === "board1") {
      drawPhantomCells(board, [4, 5, 6, 7], "board2", rewardsBoard2);
    }
    if (board.id === "board2") {
      drawPhantomCells(board, [4, 5, 6, 7], "board1", rewardsBoard1);
    }

    board.appendChild(cell);
  }
}

function createIndexHintBoard(boardId, isSecondBoard) {
  const board = document.getElementById(boardId);
  board.innerHTML = "";
  const cellSize = 60;
  const positions = [];

  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–æ–∫
  if (isSecondBoard) {
    positions[0]  = { top: 7 * cellSize, left: 6 * cellSize };
    positions[1]  = { top: 7 * cellSize, left: 5 * cellSize };
    positions[2]  = { top: 7 * cellSize, left: 4 * cellSize };
    positions[3]  = { top: 7 * cellSize, left: 3 * cellSize };
    positions[4]  = { top: 6 * cellSize, left: 3 * cellSize };
    positions[5]  = { top: 5 * cellSize, left: 3 * cellSize };
    positions[6]  = { top: 5 * cellSize, left: 2 * cellSize };
    positions[7]  = { top: 5 * cellSize, left: 1 * cellSize };
    positions[8]  = { top: 5 * cellSize, left: 0 * cellSize };
    positions[9]  = { top: 4 * cellSize, left: 0 * cellSize };
    positions[10] = { top: 3 * cellSize, left: 0 * cellSize };
    positions[11] = { top: 2 * cellSize, left: 0 * cellSize };
    positions[12] = { top: 1 * cellSize, left: 0 * cellSize };
    positions[13] = { top: 0 * cellSize, left: 0 * cellSize };
    positions[14] = { top: 0 * cellSize, left: 1 * cellSize };
    positions[15] = { top: 0 * cellSize, left: 2 * cellSize };
    positions[16] = { top: 0 * cellSize, left: 3 * cellSize };
    positions[17] = { top: 0 * cellSize, left: 4 * cellSize };
    positions[18] = { top: 0 * cellSize, left: 5 * cellSize };
    positions[19] = { top: 0 * cellSize, left: 6 * cellSize };
    positions[20] = { top: 1 * cellSize, left: 6 * cellSize };
    positions[21] = { top: 2 * cellSize, left: 6 * cellSize };
    positions[22] = { top: 3 * cellSize, left: 6 * cellSize };
    positions[23] = { top: 4 * cellSize, left: 6 * cellSize };
    positions[24] = { top: 5 * cellSize, left: 6 * cellSize };
    positions[25] = { top: 6 * cellSize, left: 6 * cellSize };
  } else {
    for (let i = 6; i >= 0; i--) positions.push({ top: 7 * cellSize, left: i * cellSize });
    for (let i = 6; i >= 1; i--) positions.push({ top: i * cellSize, left: 0 });
    for (let i = 0; i < 7; i++)  positions.push({ top: 0, left: i * cellSize });
    for (let i = 1; i <= 6; i++) positions.push({ top: i * cellSize, left: 6 * cellSize });
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
  for (let i = 0; i < 26; i++) {
    if (!positions[i]) continue; // ‚ùóÔ∏è–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–µ—Ç–∫–∏ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    const cell = document.createElement("div");
    cell.className = "cell";
    cell.style.top = positions[i].top + "px";
    cell.style.left = positions[i].left + "px";
    cell.style.backgroundColor = "#ffffff";
    cell.style.border = "1px solid #ccc";
    cell.style.opacity = "1";
    cell.style.pointerEvents = "none";
    cell.innerHTML = `<div style="font-size: 28px; font-weight: bold;">${i}</div>`;
    board.appendChild(cell);
  }

  // –§–∞–Ω—Ç–æ–º–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ 4‚Äì7 –∏–∑ board2 –Ω–∞ indexBoard1
  if (!isSecondBoard) {
    const phantomIndices = [4, 5, 6, 7];
    const phantomPositions = {
      4: { top: 6 * cellSize, left: 3 * cellSize },
      5: { top: 5 * cellSize, left: 3 * cellSize },
      6: { top: 5 * cellSize, left: 2 * cellSize },
      7: { top: 5 * cellSize, left: 1 * cellSize }
    };

    phantomIndices.forEach(i => {
      const pos = phantomPositions[i];
      if (!pos) return;
      const cell = document.createElement("div");
      cell.className = "cell";
      cell.style.top = pos.top + "px";
      cell.style.left = pos.left + "px";
      cell.style.backgroundColor = "#ffffff";
      cell.style.border = "1px solid #ccc";
      cell.style.opacity = "1";
      cell.style.pointerEvents = "none";
      cell.innerHTML = `<div style="font-size: 28px; font-weight: bold;">${i}</div>`;
      board.appendChild(cell);
    });
  }
}

function drawPhantomCells(targetBoard, indices, sourceBoardId, rewardsSource) {
  const phantomSize = 60;

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –∏ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∞–Ω—Ç–æ–º–æ–≤
  const colorScheme = sourceBoardId === "board2" ? cellColors.board2 : cellColors.board1;
  const positions = [];

  if (sourceBoardId === "board2") {
    positions[0]  = { top: 7 * phantomSize, left: 6 * phantomSize };
    positions[1]  = { top: 7 * phantomSize, left: 5 * phantomSize };
    positions[2]  = { top: 7 * phantomSize, left: 4 * phantomSize };
    positions[3]  = { top: 7 * phantomSize, left: 3 * phantomSize };
    positions[4]  = { top: 6 * phantomSize, left: 3 * phantomSize };
    positions[5]  = { top: 5 * phantomSize, left: 3 * phantomSize };
    positions[6]  = { top: 5 * phantomSize, left: 2 * phantomSize };
    positions[7]  = { top: 5 * phantomSize, left: 1 * phantomSize };
    positions[8]  = { top: 5 * phantomSize, left: 0 * phantomSize };
    positions[9]  = { top: 4 * phantomSize, left: 0 * phantomSize };
    positions[10] = { top: 3 * phantomSize, left: 0 * phantomSize };
    positions[11] = { top: 2 * phantomSize, left: 0 * phantomSize };
    positions[12] = { top: 1 * phantomSize, left: 0 * phantomSize };
    positions[13] = { top: 0 * phantomSize, left: 0 * phantomSize };
    positions[14] = { top: 0 * phantomSize, left: 1 * phantomSize };
    positions[15] = { top: 0 * phantomSize, left: 2 * phantomSize };
    positions[16] = { top: 0 * phantomSize, left: 3 * phantomSize };
    positions[17] = { top: 0 * phantomSize, left: 4 * phantomSize };
    positions[18] = { top: 0 * phantomSize, left: 5 * phantomSize };
    positions[19] = { top: 0 * phantomSize, left: 6 * phantomSize };
    positions[20] = { top: 1 * phantomSize, left: 6 * phantomSize };
    positions[21] = { top: 2 * phantomSize, left: 6 * phantomSize };
    positions[22] = { top: 3 * phantomSize, left: 6 * phantomSize };
    positions[23] = { top: 4 * phantomSize, left: 6 * phantomSize };
    positions[24] = { top: 5 * phantomSize, left: 6 * phantomSize };
    positions[25] = { top: 6 * phantomSize, left: 6 * phantomSize };
  } else {
    for (let j = 6; j >= 0; j--) positions.push({ top: 7 * phantomSize, left: j * phantomSize });
    for (let j = 6; j >= 1; j--) positions.push({ top: j * phantomSize, left: 0 });
    for (let j = 0; j < 7; j++)  positions.push({ top: 0, left: j * phantomSize });
    for (let j = 1; j <= 6; j++) positions.push({ top: j * phantomSize, left: 6 * phantomSize });
  }

  indices.forEach(i => {
    const reward = rewardsSource[i];
    if (!positions[i] || !reward) return;

    // –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ü–≤–µ—Ç –∏–∑ —Å—Ö–µ–º—ã
    let bgColor = "#ffffff";
    for (const [colorName, idxs] of Object.entries(colorScheme)) {
      if (idxs.includes(i)) {
        bgColor = colorMap[colorName];
        break;
      }
    }

    const emoji = getRewardEmoji(reward);
    const label = getRewardLabel(reward);

    const cell = document.createElement("div");
    cell.className = "cell";
    cell.style.top = positions[i].top + "px";
    cell.style.left = positions[i].left + "px";
    cell.style.backgroundColor = bgColor;
    cell.style.border = "1px dashed #999";
    cell.style.opacity = "0.4";
    cell.style.pointerEvents = "none";
    cell.title = reward;
    cell.innerHTML = `<div style="font-size: 28px;">${emoji}</div><div style="font-size: 12px;">${label}</div>`;

    targetBoard.appendChild(cell);
  });
}

function placePlayer(index, board) {
  removePlayer();
  const cell = board.querySelector('[data-index="' + index + '"]');
  if (cell) {
    cell.classList.add("active-cell");
  }
}

function toggleBoards(isOnSecondBoard) {
  board1.style.display = isOnSecondBoard ? "none" : "block";
  board2.style.display = isOnSecondBoard ? "block" : "none";
}

function removePlayer() {
  document.querySelectorAll(".active-cell").forEach(c => c.classList.remove("active-cell"));
}

function renderLog() {
  const logContainer = document.getElementById("move-log");
  logContainer.innerHTML = "<strong>–õ–æ–≥ —Ö–æ–¥–æ–≤:</strong><br>";

  let step = 1;
  moveLog.forEach((entry, index) => {
    if (entry.type === "lap") {
      logContainer.innerHTML += `üîÅ –ó–∞–≤–µ—Ä—à—ë–Ω –∫—Ä—É–≥ –Ω–∞ –ø–æ–ª–µ ${entry.board}<br>`;
    } else {
      const rewardText = entry.reward ? ` ‚Äî <em>${getRewardFullLabel(entry.reward)}</em>` : "";
      logContainer.innerHTML += `
        –•–æ–¥ ${step++}: –≤—ã–ø–∞–ª–æ ${entry.roll} ‚Üí –∫–ª–µ—Ç–∫–∞ ${entry.position} (–ø–æ–ª–µ ${entry.board})${rewardText}
        <button onclick="insertGoldenDie(${index})" title="–ë—Ä–æ—Å–∏—Ç—å –∑–æ–ª–æ—Ç–æ–π –∫—É–±–∏–∫">‚ûï</button><br>`;
    }
  });
}

function movePlayer(steps) {
  let currentBoard = onSecondBoard ? board2 : board1;
  let newPos = position + steps;

  if (!onSecondBoard && newPos >= boardSize) {
    moveLog.push({ type: "lap", board: 1 }); // –∑–∞–≤–µ—Ä—à—ë–Ω –∫—Ä—É–≥ –Ω–∞ –ø–æ–ª–µ 1

    const stepsToEnd = boardSize - 1 - position;
    const overflow = steps - stepsToEnd - 1;
    position = boardSize - 1;
    placePlayer(position, currentBoard);
    toggleBoards(onSecondBoard); // –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ 1 –ø–µ—Ä–µ–¥ –ø—Ä—ã–∂–∫–æ–º

    onSecondBoard = true;
    currentBoard = board2;
    position = overflow;
    placePlayer(position, currentBoard);
    toggleBoards(onSecondBoard); // –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ 2 –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
  } else if (onSecondBoard && newPos >= boardSize) {
    moveLog.push({ type: "lap", board: 2 }); // –∑–∞–≤–µ—Ä—à—ë–Ω –∫—Ä—É–≥ –Ω–∞ –ø–æ–ª–µ 2

    const stepsToEnd = boardSize - 1 - position;
    const overflow = steps - stepsToEnd - 1;
    position = boardSize - 1;
    placePlayer(position, currentBoard);
    toggleBoards(onSecondBoard); // –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ 2 –ø–µ—Ä–µ–¥ –ø—Ä—ã–∂–∫–æ–º

    onSecondBoard = false;
    currentBoard = board1;
    position = overflow;
    placePlayer(position, currentBoard);
    toggleBoards(onSecondBoard); // –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ 1 –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
  } else {
    if (newPos >= boardSize) newPos = boardSize - 1;
    position = newPos;
    placePlayer(position, currentBoard);
    toggleBoards(onSecondBoard); // –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
  }

  if (position === 3) {
    onSecondBoard = !onSecondBoard;
    currentBoard = onSecondBoard ? board2 : board1;
    placePlayer(3, currentBoard);
    toggleBoards(onSecondBoard); // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É 3
  }

  const reward = onSecondBoard ? rewardsBoard2[position] : rewardsBoard1[position];
  if (reward) {
    addRewardToTotal(reward);
  }

  moveLog.push({
    roll: steps,
    position: position,
    board: onSecondBoard ? 2 : 1,
    reward: reward || null
  });
}

function renderTotalRewards() {
  const summary = document.getElementById("reward-summary");
  summary.innerHTML = "<strong>–°—É–º–º–∞—Ä–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:</strong><br>";
  if (Object.keys(totalRewards).length === 0) {
    summary.innerHTML += "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥.";
    return;
  }

  for (const [name, count] of Object.entries(totalRewards)) {
    summary.innerHTML += `${count} √ó ${getRewardFullLabel(name)}<br>`;
  }
}

function addRewardToTotal(rewardText) {
  if (!rewardText) return;

  // –ü—Ä–∏–º–µ—Ä: "200 –º–æ–Ω–µ—Ç", "2 —Å–µ—Ä—ã—Ö –∫—É–±–∏–∫–∞", "–∫–ª—é—á"
  const match = rewardText.match(/^(\d+)\s+(.+)$/);
  if (match) {
    const count = parseInt(match[1]);
    const name = match[2].trim();
    totalRewards[name] = (totalRewards[name] || 0) + count;
  } else {
    // –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 1
    const name = rewardText.trim();
    totalRewards[name] = (totalRewards[name] || 0) + 1;
  }
}

function startGame() {
  let input = document.getElementById("dice-sequence").value.trim();
  if (input.includes(",")) {
    diceSequence = input.split(",").map(s => parseInt(s.trim()));
  } else {
    diceSequence = input.split("").map(ch => parseInt(ch));
  }
  diceSequence = diceSequence.filter(n => !isNaN(n) && n > 0);

  position = parseInt(document.getElementById("start-index").value);
  onSecondBoard = document.getElementById("start-board").value === "2";
  moveLog = [];
  totalRewards = {};
  createBoard(board1);
  createBoard(board2);
  placePlayer(position, onSecondBoard ? board2 : board1);

    for (let i = 0; i < diceSequence.length; i++) {
    movePlayer(diceSequence[i]);
  }
  toggleBoards(onSecondBoard);
  renderLog();
  renderTotalRewards();
  createIndexHintBoard("indexBoard1", false);
 }

function insertGoldenDie(afterIndex) {
  const value = parseInt(prompt("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–æ–≥–æ –∫—É–±–∏–∫–∞ (1‚Äì6):"));
  if (isNaN(value) || value < 1 || value > 6) {
    alert("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.");
    return;
  }

  // –í—Å—Ç–∞–≤–∫–∞ –≤ –º–∞—Å—Å–∏–≤ –∫—É–±–∏–∫–æ–≤
  diceSequence.splice(afterIndex + 1, 0, value);

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
  position = parseInt(document.getElementById("start-index").value);
  onSecondBoard = document.getElementById("start-board").value === "2";
  moveLog = [];

  createBoard(board1);
  createBoard(board2);
  placePlayer(position, onSecondBoard ? board2 : board1);

   for (let i = 0; i < diceSequence.length; i++) {
    movePlayer(diceSequence[i]);
  }
  renderLog();
  renderTotalRewards();
}
document.getElementById("start-game").addEventListener("click", startGame);